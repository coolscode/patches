From d054ca6f83f827516afc4c01ec6560417789e239 Mon Sep 17 00:00:00 2001
From: SagarMakhar <sagarmakhar@gmail.com>
Date: Fri, 3 Jun 2022 19:06:59 +0800
Subject: [PATCH] Add show|hide udfps view callbacks to
 IBiometricsFingerprint@2.3 [1/2]

---
 .../biometrics/sensors/SensorOverlays.java    | 45 +++++++++++++++++++
 .../hidl/FingerprintAuthenticationClient.java | 12 ++---
 .../hidl/FingerprintDetectClient.java         |  6 +--
 .../sensors/fingerprint/hidl/TestHal.java     |  8 +++-
 4 files changed, 61 insertions(+), 10 deletions(-)

diff --git a/services/core/java/com/android/server/biometrics/sensors/SensorOverlays.java b/services/core/java/com/android/server/biometrics/sensors/SensorOverlays.java
index 00871789..666f6aa2 100644
--- a/services/core/java/com/android/server/biometrics/sensors/SensorOverlays.java
+++ b/services/core/java/com/android/server/biometrics/sensors/SensorOverlays.java
@@ -18,6 +18,7 @@ package com.android.server.biometrics.sensors;
 
 import android.annotation.NonNull;
 import android.annotation.Nullable;
+import android.hardware.biometrics.fingerprint.V2_1.IBiometricsFingerprint;
 import android.hardware.biometrics.BiometricOverlayConstants;
 import android.hardware.fingerprint.ISidefpsController;
 import android.hardware.fingerprint.IUdfpsOverlayController;
@@ -66,6 +67,12 @@ public final class SensorOverlays {
      */
     public void show(int sensorId, @BiometricOverlayConstants.ShowReason int reason,
             @NonNull AcquisitionClient<?> client) {
+        show(null, sensorId, reason, client);
+    }
+
+    public void show(IBiometricsFingerprint daemon,
+            int sensorId, @BiometricOverlayConstants.ShowReason int reason,
+            @NonNull AcquisitionClient<?> client) {
         if (mSidefpsController.isPresent()) {
             try {
                 mSidefpsController.get().show(sensorId, reason);
@@ -83,6 +90,23 @@ public final class SensorOverlays {
                         }
                     };
 
+            if (daemon != null) {
+                android.hardware.biometrics.fingerprint.V2_3.IBiometricsFingerprint extension =
+                    android.hardware.biometrics.fingerprint.V2_3.IBiometricsFingerprint.castFrom(
+                    daemon);
+                if (extension != null) {
+                    try {
+                        extension.onShowUdfpsOverlay();
+                    } catch (RemoteException e) {
+                        Slog.v(TAG, "showUdfpsOverlay | RemoteException: ", e);
+                    }
+                } else {
+                    Slog.v(TAG, "onShowUdfpsOverlay | failed to cast the HIDL to V2_3");
+                }
+            } else {
+                 Slog.v(TAG, "onShowUdfpsOverlay | daemon null");
+            }
+
             try {
                 mUdfpsOverlayController.get().showUdfpsOverlay(sensorId, reason, callback);
             } catch (RemoteException e) {
@@ -97,6 +121,10 @@ public final class SensorOverlays {
      * @param sensorId sensor id
      */
     public void hide(int sensorId) {
+        hide(null, sensorId);
+    }
+
+    public void hide(IBiometricsFingerprint daemon, int sensorId) {
         if (mSidefpsController.isPresent()) {
             try {
                 mSidefpsController.get().hide(sensorId);
@@ -106,6 +134,23 @@ public final class SensorOverlays {
         }
 
         if (mUdfpsOverlayController.isPresent()) {
+            if (daemon != null) {
+                android.hardware.biometrics.fingerprint.V2_3.IBiometricsFingerprint extension =
+                    android.hardware.biometrics.fingerprint.V2_3.IBiometricsFingerprint.castFrom(
+                    daemon);
+                if (extension != null) {
+                    try {
+                        extension.onHideUdfpsOverlay();
+                    } catch (RemoteException e) {
+                        Slog.v(TAG, "hideUdfpsOverlay | RemoteException: ", e);
+                    }
+                } else {
+                    Slog.v(TAG, "onHideUdfpsOverlay | failed to cast the HIDL to V2_3");
+                }
+            } else {
+                Slog.v(TAG, "onHideUdfpsOverlay | daemon null");
+            }
+
             try {
                 mUdfpsOverlayController.get().hideUdfpsOverlay(sensorId);
             } catch (RemoteException e) {
diff --git a/services/core/java/com/android/server/biometrics/sensors/fingerprint/hidl/FingerprintAuthenticationClient.java b/services/core/java/com/android/server/biometrics/sensors/fingerprint/hidl/FingerprintAuthenticationClient.java
index 41546eb2..bddac691 100644
--- a/services/core/java/com/android/server/biometrics/sensors/fingerprint/hidl/FingerprintAuthenticationClient.java
+++ b/services/core/java/com/android/server/biometrics/sensors/fingerprint/hidl/FingerprintAuthenticationClient.java
@@ -121,7 +121,7 @@ class FingerprintAuthenticationClient extends AuthenticationClient<IBiometricsFi
         if (authenticated) {
             mState = STATE_STOPPED;
             resetFailedAttempts(getTargetUserId());
-            mSensorOverlays.hide(getSensorId());
+            mSensorOverlays.hide(getFreshDaemon(), getSensorId());
         } else {
             mState = STATE_STARTED_PAUSED_ATTEMPTED;
             final @LockoutTracker.LockoutMode int lockoutMode =
@@ -134,7 +134,7 @@ class FingerprintAuthenticationClient extends AuthenticationClient<IBiometricsFi
                 // Send the error, but do not invoke the FinishCallback yet. Since lockout is not
                 // controlled by the HAL, the framework must stop the sensor before finishing the
                 // client.
-                mSensorOverlays.hide(getSensorId());
+                mSensorOverlays.hide(getFreshDaemon(), getSensorId());
                 onErrorInternal(errorCode, 0 /* vendorCode */, false /* finish */);
                 cancel();
             }
@@ -149,7 +149,7 @@ class FingerprintAuthenticationClient extends AuthenticationClient<IBiometricsFi
             BiometricNotificationUtils.showBadCalibrationNotification(getContext());
         }
 
-        mSensorOverlays.hide(getSensorId());
+        mSensorOverlays.hide(getFreshDaemon(), getSensorId());
     }
 
     private void resetFailedAttempts(int userId) {
@@ -177,7 +177,7 @@ class FingerprintAuthenticationClient extends AuthenticationClient<IBiometricsFi
 
     @Override
     protected void startHalOperation() {
-        mSensorOverlays.show(getSensorId(), getShowOverlayReason(), this);
+        mSensorOverlays.show(getFreshDaemon(), getSensorId(), getShowOverlayReason(), this);
 
         try {
             // GroupId was never used. In fact, groupId is always the same as userId.
@@ -186,14 +186,14 @@ class FingerprintAuthenticationClient extends AuthenticationClient<IBiometricsFi
             Slog.e(TAG, "Remote exception when requesting auth", e);
             onError(BiometricFingerprintConstants.FINGERPRINT_ERROR_HW_UNAVAILABLE,
                     0 /* vendorCode */);
-            mSensorOverlays.hide(getSensorId());
+            mSensorOverlays.hide(getFreshDaemon(), getSensorId());
             mCallback.onClientFinished(this, false /* success */);
         }
     }
 
     @Override
     protected void stopHalOperation() {
-        mSensorOverlays.hide(getSensorId());
+        mSensorOverlays.hide(getFreshDaemon(), getSensorId());
 
         try {
             getFreshDaemon().cancel();
diff --git a/services/core/java/com/android/server/biometrics/sensors/fingerprint/hidl/FingerprintDetectClient.java b/services/core/java/com/android/server/biometrics/sensors/fingerprint/hidl/FingerprintDetectClient.java
index b854fb30..ddf941c2 100644
--- a/services/core/java/com/android/server/biometrics/sensors/fingerprint/hidl/FingerprintDetectClient.java
+++ b/services/core/java/com/android/server/biometrics/sensors/fingerprint/hidl/FingerprintDetectClient.java
@@ -69,7 +69,7 @@ class FingerprintDetectClient extends AcquisitionClient<IBiometricsFingerprint>
 
     @Override
     protected void stopHalOperation() {
-        mSensorOverlays.hide(getSensorId());
+        mSensorOverlays.hide(getFreshDaemon(), getSensorId());
 
         try {
             getFreshDaemon().cancel();
@@ -89,7 +89,7 @@ class FingerprintDetectClient extends AcquisitionClient<IBiometricsFingerprint>
 
     @Override
     protected void startHalOperation() {
-        mSensorOverlays.show(getSensorId(), BiometricOverlayConstants.REASON_AUTH_KEYGUARD, this);
+        mSensorOverlays.show(getFreshDaemon(), getSensorId(), BiometricOverlayConstants.REASON_AUTH_KEYGUARD, this);
 
         try {
             getFreshDaemon().authenticate(0 /* operationId */, getTargetUserId());
@@ -97,7 +97,7 @@ class FingerprintDetectClient extends AcquisitionClient<IBiometricsFingerprint>
             Slog.e(TAG, "Remote exception when requesting auth", e);
             onError(BiometricFingerprintConstants.FINGERPRINT_ERROR_HW_UNAVAILABLE,
                     0 /* vendorCode */);
-            mSensorOverlays.hide(getSensorId());
+            mSensorOverlays.hide(getFreshDaemon(), getSensorId());
             mCallback.onClientFinished(this, false /* success */);
         }
     }
diff --git a/services/core/java/com/android/server/biometrics/sensors/fingerprint/hidl/TestHal.java b/services/core/java/com/android/server/biometrics/sensors/fingerprint/hidl/TestHal.java
index 986e92e2..713e2b72 100644
--- a/services/core/java/com/android/server/biometrics/sensors/fingerprint/hidl/TestHal.java
+++ b/services/core/java/com/android/server/biometrics/sensors/fingerprint/hidl/TestHal.java
@@ -63,6 +63,12 @@ public class TestHal extends IBiometricsFingerprint.Stub {
 
     }
 
+    @Override
+    public void onShowUdfpsOverlay() {}
+
+    @Override
+    public void onHideUdfpsOverlay() {}
+
     @Override
     public long setNotify(IBiometricsFingerprintClientCallback clientCallback) {
         mCallback = clientCallback;
@@ -138,4 +144,4 @@ public class TestHal extends IBiometricsFingerprint.Stub {
         Slog.w(TAG, "Authenticate");
         return 0;
     }
-}
\ No newline at end of file
+}
-- 
2.36.1

